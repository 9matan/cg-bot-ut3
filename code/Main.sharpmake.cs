using Sharpmake;

[module: Sharpmake.Include(@"BotApp\BotApp.sharpmake.cs")]
[module: Sharpmake.Include(@"BotApp_Packed\BotApp_Packed.sharpmake.cs")]
[module: Sharpmake.Include(@"BotCore\BotCore.sharpmake.cs")]
[module: Sharpmake.Include(@"BotCore_Test\BotCore_Test.sharpmake.cs")]
[module: Sharpmake.Include(@"Sharpmake\Common.sharpmake.cs")]

// Mimax
[module: Sharpmake.Include(@"..\external\mimax\code\MimaxCommon\MimaxCommon.sharpmake.cs")]
[module: Sharpmake.Include(@"..\external\mimax\code\Minimax\Minimax.sharpmake.cs")]

[Generate]
public class CGBotSolution : CommonSolution
{
	public CGBotSolution()
	{
		Name = "CGBotSolution";

		PostGenerationCallback = OnGeneratedCallBack;
	}

	~CGBotSolution()
	{
		PostGenerationCallback = null;
	}

	public override void ConfigureAll(Solution.Configuration conf, Target target)
    {
		base.ConfigureAll(conf, target);
		
        conf.SolutionPath = @"[solution.SharpmakeCsPath]\Sharpmake\generated";
		
		conf.AddProject<MimaxCommonProject>(target);
		conf.AddProject<MinimaxProject>(target);
		
		conf.AddProject<BotAppProject>(target);
		conf.AddProject<BotAppPackedProject>(target);
		conf.AddProject<BotCoreProject>(target);
		conf.AddProject<BotCoreTestProject>(target);

		conf.SetStartupProject<BotCoreTestProject>();
    }

	public void OnGeneratedCallBack(string solutionPath, string solutionFile, string solutionExtension)
	{
		OrderableStrings includedPaths = new OrderableStrings();
		foreach (var solutionConfig in Configurations)
		{
			foreach(var projectInfo in solutionConfig.IncludedProjectInfos)
			{
				includedPaths.AddRange(projectInfo.Configuration.IncludePaths);
			}
		}

		string srcFile = $@"{SharpmakeCsPath}\BotApp\Bot.cpp";
		string dstFile = $@"{SharpmakeCsPath}\BotApp_Packed\BotPacked.cpp";
		string packerFile = $@"{SharpmakeCsPath}\BotApp_Packed\{PackedProjectInfo.PackerFileName}";

		var pathsArgs = new System.Text.StringBuilder();
		foreach(var path in includedPaths)
		{
			pathsArgs.Append($"\"{path}\" ");
		}

		using (var file = System.IO.File.CreateText(packerFile))
		{
			file.WriteLine("REM File is generated by Main.sharpmake.cs");
			file.WriteLine("@echo off");
			file.WriteLine($@"python {SharpmakeCsPath}\..\external\one-cpp-packer\OneCppPacker.py -src {srcFile} -dst {dstFile} -addp {pathsArgs}");
		}
	}
}

public static class Main
{
    [Sharpmake.Main]
    public static void SharpmakeMain(Sharpmake.Arguments arguments)
    {
		KitsRootPaths.SetUseKitsRootForDevEnv(DevEnv.vs2019, KitsRootEnum.KitsRoot10, Options.Vc.General.WindowsTargetPlatformVersion.Latest);

		arguments.Generate<CGBotSolution>();
    }
}